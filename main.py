from adsorption import *
from units import *
from system_variables import *
from mpmath import mp

precision = mp.dps = 30 # Represent number with 50 digits precision, necessary 
            # to avoid numerical problems when dealing with differences 
	    # between small numbers generated by exponentials

assert precision>=30, AssertionError( "You need high precision to avoid numerical problem, set to 50" )

# Control output
verbose = False
n_sampling_points = 50 #Number of sampling points for the receptor surface density

# These two parameters simply control the maximum and minimum receptor surface density
# for which calculations are made
sigma_R_min = 1.0 / um2 # Minimum receptor surface density.
                        # Corresponds to average distance between receptors is 1 um
sigma_R_max = 1e4 / um2 # Maximum receptor surface density
                        # Corresponds to average distance between receptors is 10 nm

# Create the system
system = MultivalentBinding( kT=kT, R_NP = R_NP, 
                            data_polymers=data_polymers, 
                            binding_model = "saddle", 
                            polymer_model = "gaussian",
                            A_cell = A_cell, 
                            NP_conc = NP_conc, 
                            cell_conc = cell_conc, )
 
# Store everything in a file, so we can plot it later
with open( 'adsorption.dat', 'w+' ) as f:
    min_exp = np.log10( sigma_R_min )
    max_exp = np.log10( sigma_R_max )
    M_conc = (A_cell/(np.pi * R_NP**2)) * cell_conc # Concentration of binding sites for NPs
    #print( f'NP concentration {NP_conc/(1/mL):5.3e} (1/mL)' )
    #print( f'Binding sites concentration {M_conc/(1/mL):5.3e} (1/mL)' )
    #print( f'Max adsorbed fraction achievable: min(1, M_conc/NP_conc) = {min(1, M_conc/NP_conc):5.3e}' )
    #f.write( f'sigma_R (um^-2) KD_eff (M) adsorbed_fraction\n' )
    for sigma_R in np.logspace( min_exp, max_exp, n_sampling_points ):
        K_bind = system.calculate_binding_constant( 
                                                          K_bind_0=K_bind_0, 
                                                          sigma_R = sigma_R, 
                                                          verbose = verbose)
        
        #print( f'Effective dissociation constant (M): {float((1.0 / K_bind) / M):5.3e}' )
        # Now we can calculate the adsorbed fraction
        adsorbed_fraction = system.calculate_bound_fraction( K_bind=K_bind )
        # Print the adsorbed fraction
        out1 = float(sigma_R/(1/um2))
        out2 = float((1 / K_bind) / M)
        out3 = float(adsorbed_fraction)
        f.write( f"""{out1:5.3e} {out2:5.3e} {out3:5.3e}\n""")
        #print( f'Adsorbed fraction, ideal polymer: {out3:5.3e}' )
        #print( "------------------" )

# Now we can plot the results
import matplotlib.pyplot as plt
import numpy as np

data = np.loadtxt( 'adsorption.dat', skiprows=2 )
plt.xscale( 'log' )
plt.yscale( 'linear' )
plt.plot( data[:,0], data[:,2], linestyle='solid' )
plt.xlabel( 'Receptor surface density $(\mu$m$^{-2}$)' )
plt.ylabel( 'Adsorbed fraction' )
plt.legend()
plt.savefig( 'adsorption.png' )
plt.close()