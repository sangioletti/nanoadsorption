from adsorption import *
from mpmath import mp
import matplotlib.pyplot as plt
import numpy as np

precision = mp.dps = 50 # Represent number with 50 digits precision, necessary 
            # to avoid numerical problems when dealing with differences 
	    # between small numbers generated by exponentials

assert precision>=50, AssertionError( "You need high precision to avoid numerical problem, set to 50" )

# This is really just for bookkeeping, basically decide the units to be used 
nm = 1.0 # 1 nm in units of length
nm2 = nm*nm # 1 nm^2 in units of area
nm3 = nm*nm*nm # 1 nm^3 in units of volume
mm = 1e6 * nm # 1 mm in units of length
mm3 = mm**3 # 1 mm^3 in units of volume
L = 1e24 * nm3 # 1 L in units of volume
mL = 1e-3 * L # 1 mL in units of volume
um = 1.0e3 * nm # 1 micrometer
um2 = um*um # 1 um^2 in units of area
kT = 1.0 # 1 kT in units of energy
g = 1.0 # 1 g is units of mass, only for bookkeeping

# Define derived units
L = 1e24 * nm3 # 1 L in units of volume
M = 6.023e23 / L # Avogadro's number 
nM = M * 1e-9 # 1 nM 

#****Dosing particles intravenously to animal******
Npdosing=8e12 / mL # Number of particles in dosing solution per mL [mL-1]
Vdosing=5*0.02 * mL # Dosing volume for each animal [mL] (e.g. 5 mL/kg and animal weight 0.02 kg)
fTzone=0.1 # Fraction of dosed particles that ends up in T zone of animal spleen
VTzone=0.5*0.084 * mL # Volume of spleen Tzone in animal [mL] (Assuming 50% of mouse spleen of volume 0.084 mL)
NP_conc=Npdosing*Vdosing*fTzone/VTzone # Number of particles per mL in Tzone of mouse spleen [mL-1]

# Define the design of the multivalent nanoparticle
def Nmonomers( MW ):
    '''Calculate the number of monomers in a PEG chain of a given molecular weight'''
    return int( MW - 18 ) / 44.0

NmonoLong = Nmonomers( 3400 * g ) # Number of monomers in PEG3400 chain
NmonoShort = Nmonomers( 2000 * g ) # Number of monomers in PEG3400 chain
amono = 0.34 * nm # Monomer size in PEG chain
PEG_max_extension = NmonoLong * amono # Max extension of the PEG chain
KD = 0.10 * nM # Dissociation constant in solution between ligand-receptor
K_bind_0 = KD**(-1) # Binding constant in solution between ligand-receptor
R_NP = 35 * nm # Nanoparticle radius in units of length
v_bind = np.pi * R_NP**2 * PEG_max_extension # Volume of binding site 
N_ligands = 150 # Number of ligands on the nanoparticle
sigma_L = 150.0 / ( 4.0 * np.pi * R_NP**2 ) # surface density of ligands
sigma_P2K = 1.0 / ( 2.0 * nm )**2  # Surface density of short PEG chains

# Define system parameters - this info should be checked, for now it is just
# a search from chatGPT
N_lympho = 7.5e7 # Average number of lymphocytes in mouse spleen
N_T_cells = 0.25 * N_lympho # Number of T cells in mouse spleen
V_spleen = 100 * mm3 # Volume of mouse spleen
cell_conc = N_T_cells / V_spleen # T cell concentration in the spleen
A_cell = 100 * um2 # Cell area 
sigma_R_min = 1.0 / um2 # Minimum receptor surface density.
                        # Corresponds to average distance between receptors is 1 um
sigma_R_max = 1e4 / um2 # Maximum receptor surface density
                        # Corresponds to average distance between receptors is 10 nm

# Control output
verbose = False
n_sampling_points = 4 #Number of sampling points for the receptor surface density

# Create the system
system_exact = MultivalentBinding( kT=kT, R_NP = R_NP, N_long = NmonoLong , 
                            N_short = NmonoShort,
                            a_mono = amono, 
                            binding_model = "exact", 
                            polymer_model = "gaussian",
                            A_cell = A_cell, 
                            NP_conc = NP_conc, 
                            cell_conc = cell_conc, 
                            )
                            


max_extension = PEG_max_extension
with open( 'W_total1.dat', 'w+' ) as f:
    sigma_R = sigma_R_max
    Ree = np.sqrt( NmonoLong ) * amono
    for h in np.linspace( 0.0, max_extension, 50 ):
        W_total = system_exact.W_total( h=h, sigma_L=sigma_L, sigma_polymer=sigma_L, 
                                     sigma_R=sigma_R, N=NmonoLong, a=amono, K_bind_0=K_bind_0, verbose=verbose )
        out1 = float(h/Ree)
        out2 = float(W_total)
        f.write( f'{out1:5.3e} {out2:5.3e} \n' )
with open( 'W_total2.dat', 'w+' ) as f:
    sigma_R = sigma_R_max
    Ree = np.sqrt( NmonoLong ) * amono
    for h in np.linspace( 0.0, max_extension, 50 ):
        W_total = system_exact.W_total( h=h, sigma_L=sigma_L, sigma_polymer=sigma_L, 
                                     sigma_R=sigma_R, N=NmonoLong, a=amono, K_bind_0=K_bind_0*10, verbose=verbose )
        out1 = float(h/Ree)
        out2 = float(W_total)
        f.write( f'{out1:5.3e} {out2:5.3e} \n' )
with open( 'W_total3.dat', 'w+' ) as f:
    sigma_R = sigma_R_max
    Ree = np.sqrt( NmonoLong ) * amono
    for h in np.linspace( 0.0, max_extension, 50 ):
        W_total = system_exact.W_total( h=h, sigma_L=sigma_L, sigma_polymer=sigma_L, 
                                     sigma_R=sigma_R/10, N=NmonoLong, a=amono, K_bind_0=K_bind_0, verbose=verbose )
        out1 = float(h/Ree)
        out2 = float(W_total)
        f.write( f'{out1:5.3e} {out2:5.3e} \n' )

dataB1 = np.loadtxt( 'W_total1.dat', skiprows=0 )
dataB2 = np.loadtxt( 'W_total2.dat', skiprows=0 )
dataB3 = np.loadtxt( 'W_total3.dat', skiprows=0 )
plt.xscale( 'linear' )
plt.yscale( 'linear' )
plt.plot( dataB1[:,0], dataB1[:,1], label='K_D, $\sigma_R$', linestyle='solid' )
plt.plot( dataB2[:,0], dataB2[:,1], label='K_D/10, $\sigma_R$', linestyle='solid' )
plt.plot( dataB3[:,0], dataB3[:,1], label='K_0, $\sigma_R / 10$', linestyle='solid' )
plt.xlabel( 'h (nm)' )
plt.ylabel( 'Free energy density (kbT/nm$^2$)' )
plt.legend()
# Adjust layout
plt.tight_layout()
plt.savefig( 'W_vs_h.pdf' )
